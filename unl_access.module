<?php

// Create numeric ids for each affiliation to use as gids in node_access table
define('UNL_AFFILIATION_ANY',     1);
define('UNL_AFFILIATION_GUEST',   2);
define('UNL_AFFILIATION_STUDENT', 3);
define('UNL_AFFILIATION_STAFF',   4);
define('UNL_AFFILIATION_FACULTY', 5);

/**
 * Return an array of numeric ids to textual names of affiliations.
 * @return array
 */
function _unl_access_get_grant_id_from_affiliation($affiliation) {
  $map = array(
    'affiliate'         => UNL_AFFILIATION_STAFF,
    'continue services' => UNL_AFFILIATION_FACULTY,
    'emeriti'           => UNL_AFFILIATION_FACULTY,
    'faculty'           => UNL_AFFILIATION_FACULTY,
    'override'          => UNL_AFFILIATION_GUEST,
    'retiree'           => UNL_AFFILIATION_STAFF,
    'rif'               => UNL_AFFILIATION_STAFF,
    'sponsored'         => UNL_AFFILIATION_GUEST,
    'staff'             => UNL_AFFILIATION_STAFF,
    'student'           => UNL_AFFILIATION_STUDENT,
    'volunteer'         => UNL_AFFILIATION_STAFF,
  );

  if (isset($map[$affiliation])) {
    return $map[$affiliation];
  }

  return UNL_AFFILIATION_ANY;
}

/**
 * Implements hook_access_node_grants.
 * Create a grant for each affiliation the user has.
 */
function unl_access_node_grants($account, $op) {
  $grants = array();

  $grants['unl access owner'][] = $account->uid;

  if (!isset($account->data['unl']['affiliations']) || !$account->data['unl']['affiliations']) {
    return $grants;
  }

  $grants['unl access affiliation'][] = UNL_AFFILIATION_ANY;
  foreach ($account->data['unl']['affiliations'] as $affiliation) {
    $grants['unl access affiliation'][] = _unl_access_get_grant_id_from_affiliation($affiliation);
  }

  return $grants;
}

/**
 * Implements hook_node_access_records.
 * If a node has access limited to some affiliations, put those grants into node_access table
 * along with a grant for the node owner.
 */
function unl_access_node_access_records($node) {
  $grants = array();

  foreach ($node->unl_access['affiliations'] as $affiliation) {
    if (!$affiliation) {
      continue;
    }
    $grants[] = array(
      'realm' => 'unl access affiliation',
      'gid'   => $affiliation,
      'grant_view'   => 1,
      'grant_update' => 0,
      'grant_delete' => 0,
      'priority'     => 0,
    );
  }

  // If we're restricting access to this node, give the owner full access.
  if ($grants) {
    $grants[] = array(
      'realm' => 'unl access owner',
      'gid'   => $node->uid,
      'grant_view'   => 1,
      'grant_update' => 1,
      'grant_delete' => 1,
      'priority'     => 0,
    );
  }

  return $grants;
}

/**
 * Implements hook_form_alter.
 * Add a section to the node edit form to allow users to limit viewing of the node to certain UNL affiliations.
 */
function unl_access_form_alter(&$form, &$form_state, $form_id) {
  if (isset($form['type']['#value']) && $form['type']['#value'] . '_node_form' == $form_id) {
    $form['unl_access'] = array(
      '#type' => 'fieldset',
      '#title' => 'UNL Access',
      '#group' => 'additional_settings',
    );
    $form['unl_access']['affiliations'] = array(
      '#type' => 'checkboxes',
      '#multiple' => TRUE,
      '#title' => 'Affiliations',
      '#description' => 'Restrict viewing of this node to these UNL affiliations (select none for public access).',
      '#options' => array(
        UNL_AFFILIATION_ANY     => 'Any Affiliation',
        UNL_AFFILIATION_GUEST   => 'Guest',
        UNL_AFFILIATION_STUDENT => 'Student',
        UNL_AFFILIATION_STAFF   => 'Staff',
        UNL_AFFILIATION_FACULTY => 'Faculty or Emeriti',
      ),
      '#default_value' => isset($form_state['node']->unl_access) ? $form_state['node']->unl_access['affiliations'] : array(),
      '#attached' => array(
        'js' => array(drupal_get_path('module', 'unl_access') . '/node.js')
      ),
      '#parents' => array('unl_access', 'affiliations'),
    );
  }
}

/**
 * Implements hook_node_insert.
 * After saving a node, also save which affiliations are allowed to view it.
 */
function unl_access_node_insert($node) {
  foreach ($node->unl_access['affiliations'] as $affiliation) {
    if (!$affiliation) {
      continue;
    }
    db_insert('unl_access_node_affiliation')
      ->fields(array('nid', 'affiliation'))
      ->values(array($node->nid, $affiliation))
      ->execute();
  }
}

/**
 * Implements hook_node_delete.
 * When removing a node, remove all affiliation access data.
 */
function unl_access_node_delete($node) {
  db_delete('unl_access_node_affiliation')
    ->condition('nid', $node->nid)
    ->execute();
}

/**
 * Implements hook_node_update.
 * When updating a node, also update affiliation access data.
 */
function unl_access_node_update($node) {
  unl_access_node_delete($node);
  unl_access_node_insert($node);
}

/**
 * Implements hook_node_load.
 * When loading a node, append any affiliation access data.
 */
function unl_access_node_load($nodes, $types) {
  $nodeIds = array_keys($nodes);
  $data = db_select('unl_access_node_affiliation', 'a')
    ->fields('a', array('nid', 'affiliation'))
    ->condition('nid', $nodeIds)
    ->execute()
    ->fetchAll();

  foreach ($data as $row) {
    $nodes[$row->nid]->unl_access['affiliations'][$row->affiliation] = $row->affiliation;
  }
}

/**
 * Implements hook_page_alter.
 * Intercepts 404 pages and makes the message for friendly if the user isn't currently
 * a member of one of the required affiliations.
 */
function unl_access_page_alter(&$page) {
  // We only care about 403 pages.
  if (drupal_get_http_header('Status') != '403 Forbidden') {
    return;
  }

  // We only care about individual node pages.
  if (substr(current_path(), 0, 5) != 'node/') {
    return;
  }

  // We only care if we're the one limiting access to this page.
  $nid = substr(current_path(), 5);
  $data = db_select('unl_access_node_affiliation', 'a')
    ->fields('a', array('affiliation'))
    ->condition('nid', $nid)
    ->execute()
    ->fetchAll();

  if (!$data) {
    return;
  }

  // Generate the friendly error message and display it.
  $affiliations = array();
  foreach ($data as $row) {
    switch ($row->affiliation) {
      case UNL_AFFILIATION_ANY:
        $page['content']['system_main']['main']['#markup'] = 'You must be logged in to a UNL account to view this page.';
        return;
      case UNL_AFFILIATION_GUEST:
        $affiliations[] = 'Guest' . (user_is_anonymous() ? '' : 's');
        break;
      case UNL_AFFILIATION_STUDENT:
        $affiliations[] = 'Student' . (user_is_anonymous() ? '' : 's');
        break;
      case UNL_AFFILIATION_STAFF:
        $affiliations[] = 'Staff';
        break;
      case UNL_AFFILIATION_FACULTY:
        $affiliations[] = 'Faculty';
        $affiliations[] = 'Emeriti';
        break;
    }
  }

  if (count($affiliations) > 1) {
    $affiliations[count($affiliations)-1] = (user_is_anonymous() ? 'or ' : 'and ') . $affiliations[count($affiliations)-1];
  }
  $affiliations = implode(', ', $affiliations);
  if (user_is_anonymous()) {
    $page['content']['system_main']['main']['#markup'] = 'You must be logged in as a UNL ' . $affiliations . ' to view this page.';
  } else {
    $page['content']['system_main']['main']['#markup'] = 'Only UNL ' . $affiliations . ' are allowed to view this page.';
  }
}
